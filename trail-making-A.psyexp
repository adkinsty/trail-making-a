<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2021.1.2">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': ''}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1440, 900]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="trail-making-A" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Save" valType="str"/>
    <Param name="logging level" updates="None" val="debug" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="targetCode">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="trialTargets = [];&amp;#10;trialTargetLabels = [];&amp;#10;trialLines = [];&amp;#10;loopCounter = 0;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="loopCounter += 1;&amp;#10;trialStep = 0;&amp;#10;&amp;#10;// Keep track of steps for the &amp;#10;steps = [];&amp;#10;step = 0;&amp;#10;number_of_targets = 25; // Change number of targets here&amp;#10;&amp;#10;trialTargets = [];&amp;#10;trialTargetLabels = [];&amp;#10;trialLines = [];&amp;#10;&amp;#10;// For creating unique labels&amp;#10;// Class from https://stackoverflow.com/questions/12504042/what-is-a-method-that-can-be-used-to-increment-letters&amp;#10;class StringIdGenerator {&amp;#10;  constructor(chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') {&amp;#10;    this._chars = chars;&amp;#10;    this._nextId = [0];&amp;#10;  }&amp;#10;&amp;#10;  next() {&amp;#10;    const r = [];&amp;#10;    for (const char of this._nextId) {&amp;#10;      r.unshift(this._chars[char]);&amp;#10;    }&amp;#10;    this._increment();&amp;#10;    return r.join('');&amp;#10;  }&amp;#10;&amp;#10;  _increment() {&amp;#10;    for (let i = 0; i &lt; this._nextId.length; i++) {&amp;#10;      const val = ++this._nextId[i];&amp;#10;      if (val &gt;= this._chars.length) {&amp;#10;        this._nextId[i] = 0;&amp;#10;      } else {&amp;#10;        return;&amp;#10;      }&amp;#10;    }&amp;#10;    this._nextId.push(0);&amp;#10;  }&amp;#10;&amp;#10;  *[Symbol.iterator]() {&amp;#10;    while (true) {&amp;#10;      yield this.next();&amp;#10;    }&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;const alphaID = new StringIdGenerator();&amp;#10;&amp;#10;// Improve on this algorithm&amp;#10;allCoordinates = function() {&amp;#10;    var coordArray = [];&amp;#10;    var offset;&amp;#10;    var newX, newY;&amp;#10;&amp;#10;    for ( var x = 0.5; x &gt;= -0.5; x -= 0.1) {&amp;#10;        for ( var y = 0.4; y &gt;= -0.4; y -=0.1 ) {&amp;#10;            &amp;#10;          // set distance to move the target&amp;#10;          offset = Math.random() * 2 * Math.PI;&amp;#10;          newX = x + 0.02 * Math.cos(offset);&amp;#10;          newY = y + 0.02 * Math.sin(offset);&amp;#10;          coordArray.push([newX, newY]);&amp;#10;        }&amp;#10;    }&amp;#10;    return coordArray;&amp;#10;}&amp;#10;.call(this);&amp;#10;&amp;#10;util.shuffle(allCoordinates);&amp;#10;&amp;#10;// How many targets are needed?&amp;#10;choiceCoordinates = allCoordinates.slice(0, number_of_targets);&amp;#10;&amp;#10;// Make and label the targets&amp;#10;for (var index in choiceCoordinates) { &amp;#10;    trialTargets.push(&amp;#10;        new visual.Polygon({&amp;#10;                win: psychoJS.window,&amp;#10;                name: &quot;trialTarget&quot; + index,&amp;#10;                edges: 30,&amp;#10;                size: [0.05, 0.05],&amp;#10;                ori: 0,&amp;#10;                pos: choiceCoordinates[index],&amp;#10;                lineWidth: 1,&amp;#10;                lineColor: new util.Color([1, 1, 1]),&amp;#10;                lineColorSpace: &quot;rgb&quot;,&amp;#10;                fillColor: new util.Color([1, 1, 1]),&amp;#10;                fillColorSpace: &quot;rgb&quot;,&amp;#10;                opacity: 0.25,&amp;#10;                interpolate: true,&amp;#10;            })&amp;#10;    );&amp;#10;    trialTargetLabels.push(&amp;#10;        new visual.TextStim({&amp;#10;            win: psychoJS.window,&amp;#10;            name: &quot;label&quot; + index,&amp;#10;            text: -1,&amp;#10;            font: 'Courier',&amp;#10;            pos: choiceCoordinates[index], height: 0.03, ori: 0,&amp;#10;            color: new util.Color('black'),  opacity: 1,&amp;#10;            depth: -1.0 &amp;#10;          })&amp;#10;    );&amp;#10;      trialTargetLabels[index].text = parseInt(index, 10) + 1;&amp;#10;//    if (index % 2 == 0) {&amp;#10;//        trialTargetLabels[index].text = parseInt(index, 10)/2 + 1;&amp;#10;//    } else {&amp;#10;//        trialTargetLabels[index].text = alphaID.next();&amp;#10;//    }&amp;#10;}&amp;#10;&amp;#10;makeLines = function() {&amp;#10;    for (var index = 0; index &lt; (choiceCoordinates.length ); index++) {&amp;#10;        if ( index == 0 ) {&amp;#10;            trialLines.push(&amp;#10;                new visual.ShapeStim({ &amp;#10;                    win: psychoJS.window,&amp;#10;                    vertices: [ (0,0), (0,0) ],&amp;#10;                    opacity: 0,&amp;#10;                })&amp;#10;            );&amp;#10;        } else {&amp;#10;            trialLines.push(&amp;#10;                new visual.ShapeStim({ &amp;#10;                    win: psychoJS.window,&amp;#10;                    vertices: [ trialTargets[index-1].pos, trialTargets[index].pos ],&amp;#10;                    opacity: 0,&amp;#10;                    lineWidth: 1,&amp;#10;                })&amp;#10;            );&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;.call(this);&amp;#10;&amp;#10;// Function to delay before the the next routine runs&amp;#10;waitTime = function (t) {&amp;#10;    const currentTime = globalClock.getTime();&amp;#10;    waitTime = function (a) {&amp;#10;        return currentTime + t;&amp;#10;    };&amp;#10;    return waitTime(0);&amp;#10;};&amp;#10;&amp;#10;//CursorTargetDistance = function (trialStep) {&amp;#10;//    var Xpos, Ypos;&amp;#10;//    if (trialStep &gt;= 0) {&amp;#10;//        Xpos = trialTargets[trialStep].pos[0];&amp;#10;//        Ypos = trialTargets[trialStep].pos[1];&amp;#10;//    } else {&amp;#10;//        Xpos = 0;&amp;#10;//        Ypos = 0;&amp;#10;//    }&amp;#10;//    return Math.sqrt(&amp;#10;//        Math.pow( (trialCursor.pos[0] - Xpos), 2 ) + &amp;#10;//        Math.pow( (trialCursor.pos[1] - Ypos), 2 )&amp;#10;//    );&amp;#10;//}&amp;#10;&amp;#10;PrevCursorTargetDistance = function (tstep) {&amp;#10;    &amp;#10;    if (tstep &gt; 0) {&amp;#10;       return Math.sqrt(&amp;#10;            Math.pow( (trialCursor.pos[0] - trialTargets[tstep-1].pos[0]), 2 ) +&amp;#10;            Math.pow( (trialCursor.pos[1] - trialTargets[tstep-1].pos[1]), 2 )&amp;#10;        );&amp;#10;    } else {&amp;#10;       return Math.sqrt(&amp;#10;            Math.pow( trialCursor.pos[0], 2 ) +&amp;#10;            Math.pow( trialCursor.pos[1], 2 )&amp;#10;        );&amp;#10;    }&amp;#10;}&amp;#10;data_stimulusXPos = [];&amp;#10;data_stimulusYPos = [];&amp;#10;data_stimLabels = [];&amp;#10;&amp;#10;trialTargets.forEach( thisComponent =&gt; data_stimulusXPos.push(thisComponent.pos[0]) );&amp;#10;trialTargets.forEach( thisComponent =&gt; data_stimulusYPos.push(thisComponent.pos[1]) );&amp;#10;trialTargetLabels.forEach( thisComponent =&gt; data_stimLabels.push(thisComponent.text) );&amp;#10;&amp;#10;trialTargets.forEach( thisComponent =&gt; thisComponent.setAutoDraw(true) );&amp;#10;trialTargetLabels.forEach( thisComponent =&gt; thisComponent.setAutoDraw(true) );&amp;#10;trialLines.forEach( thisComponent =&gt; thisComponent.setAutoDraw(true) );" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="trialCursor.pos = (1.5,1.5)&amp;#10;trialMouse.pos = (1.5,1.5)&amp;#10;&amp;#10;coordinates = [ [ [x,y] for y in range(-0.4, 0.4, 0.5)] for x in range(-0.4, 0.4, 0.5) ]&amp;#10;&amp;#10;trialTargets = []&amp;#10;&amp;#10;trialTarget = visual.Polygon(&amp;#10;    win=win, name='trialTarget',&amp;#10;    edges=30, size=(0.025, 0.025),&amp;#10;    ori=0, pos=(0, 0),&amp;#10;    lineWidth=1, lineColor=[1,1,1], lineColorSpace='rgb',&amp;#10;    fillColor=[1,1,1], fillColorSpace='rgb',&amp;#10;    opacity=1, depth=-1.0, interpolate=True)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="CursorTargetDistance = sqrt((trialCursor.pos[0]-trialTarget.pos[0])**2 + (trialCursor.pos[1]-trialTarget.pos[1])**2)&amp;#10;&amp;#10;if (CursorTargetDistance &lt; .025):&amp;#10;        print('Target get'+' ('+str(globalClock.getTime())+')')&amp;#10;        continueRoutine = False" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="console.log(PrevCursorTargetDistance(trialStep-1));&amp;#10;&amp;#10;if ( trialStep &lt; trialTargets.length ) {&amp;#10;    CursorTargetDistance = Math.sqrt(&amp;#10;        Math.pow( (trialCursor.pos[0] - trialTargets[trialStep].pos[0]), 2 ) +&amp;#10;        Math.pow( (trialCursor.pos[1] - trialTargets[trialStep].pos[1]), 2 )&amp;#10;    );&amp;#10;    &amp;#10;    // Check if the mouse left the previous cursor&amp;#10;    if ( trialStep &lt;= 0 &amp;&amp; (PrevCursorTargetDistance(trialStep) &lt; trialTargets[trialStep].size[0]/2) ) {&amp;#10;        console.log(&quot;in old&quot;);&amp;#10;        console.log(trialStep);&amp;#10;        steps.push(trialStep);&amp;#10;    } else if ( trialStep &gt; 0 &amp;&amp; PrevCursorTargetDistance(trialStep) &lt; trialTargets[trialStep-1].size[0]/2) {&amp;#10;        console.log(&quot;in old&quot;);&amp;#10;        console.log(trialStep);&amp;#10;        steps.push(trialStep);&amp;#10;    } else if ( CursorTargetDistance &gt;= trialTargets[trialStep].size[0]/2 ) {&amp;#10;        console.log(&quot;going new&quot;);&amp;#10;        console.log(trialStep+0.5);&amp;#10;        steps.push(trialStep+0.5);&amp;#10;    } else if ( CursorTargetDistance &lt; trialTargets[trialStep].size[0]/2 ) {&amp;#10;        console.log(&quot;in new&quot;);&amp;#10;        trialTargets[trialStep].opacity = 0;&amp;#10;        trialTargetLabels[trialStep].opacity = 0.25;&amp;#10;        trialLines[trialStep].opacity = 1;&amp;#10;        trialStep += 1;&amp;#10;        console.log(trialStep);&amp;#10;        steps.push(trialStep);&amp;#10;    }&amp;#10;&amp;#10;} else {&amp;#10;    &amp;#10;    if( globalClock.getTime() &gt; waitTime(0.5) ) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;incrementStepOnce = function () {&amp;#10;    step = step + 0.5;&amp;#10;} " valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="trialTargets.forEach( thisComponent =&gt; thisComponent.setAutoDraw(false) );&amp;#10;trialTargetLabels.forEach( thisComponent =&gt; thisComponent.setAutoDraw(false) );&amp;#10;trialLines.forEach( thisComponent =&gt; thisComponent.setAutoDraw(false) );&amp;#10;&amp;#10;psychoJS.experiment.addData(&quot;cumulativetime&quot;, globalClock.getTime());&amp;#10;psychoJS.experiment.addData( &quot;stimulusX&quot;, data_stimulusXPos);&amp;#10;psychoJS.experiment.addData( &quot;stimulusY&quot;, data_stimulusYPos);&amp;#10;psychoJS.experiment.addData( &quot;stimulusSymbol&quot;, data_stimLabels);&amp;#10;psychoJS.experiment.addData( &quot;steps&quot;, steps );" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="targetCode" valType="code"/>
      </CodeComponent>
      <MouseComponent name="trialMouse">
        <Param name="clickable" updates="constant" val="" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="never" valType="str"/>
        <Param name="name" updates="None" val="trialMouse" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="False" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="every frame" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="routine" valType="str"/>
      </MouseComponent>
      <PolygonComponent name="trialCursor">
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="180" valType="int"/>
        <Param name="name" updates="None" val="trialCursor" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every frame" val="(trialMouse.getPos()[0], trialMouse.getPos()[1])" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.001, 0.001)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
    </Routine>
    <Routine name="instructions">
      <TextComponent name="instr_text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="instr_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="There are numbers in circles on the next page. Please use your mouse to draw a line from one number to the next, in order. Start at 1, then go to 2, then go to 3, and so on. Please try not to take your hand off the mouse as you move from one number to the next. Work as quickly and accurately as you can.&amp;#10;&amp;#10;Press 'space' when you are ready to begin." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="trialRound">
      <TextComponent name="trialCount">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="trialCount" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0,0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$(loopCounter+1) + &quot; of &quot; + 1" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="trialEnd">
      <TextComponent name="results">
        <Param name="color" updates="constant" val="orange" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="results" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0,0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="Your time will be displayed here." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="endCode">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="round_num = function(num, n=0) {    &amp;#10;    return +(Math.round(num + (&quot;e+&quot; + n))  + (&quot;e-&quot; + n));&amp;#10;}" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ( loopCounter &gt; 0 ) {&amp;#10;    results.text = &quot;Total time: &quot; + round_num(trialMouse.time[(trialMouse.time.length - 1)], 2).toString() + &quot; s.\n Press 'space' to continue.&quot;;&amp;#10;}" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="endCode" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="setup">
      <CodeComponent name="JSCode">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="thisExp = psychoJS.experiment;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="JSCode" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="rng">
      <TextComponent name="rng_instr">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="rng_instr" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, .15)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="This is your 4-digit completion code. Please write this down for later use. When you are finished, press SPACE to end the experiment. " valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <TextComponent name="rng_text">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="rng_text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$random_number" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <KeyboardComponent name="rng_resp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="rng_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="rng_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="random_number = Math.floor(Math.random() * 9999) + 1000;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="rng_code" valType="code"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="setup"/>
    <Routine name="instructions"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <Routine name="trialEnd"/>
    <LoopTerminator name="trials"/>
    <Routine name="rng"/>
  </Flow>
</PsychoPy2experiment>
